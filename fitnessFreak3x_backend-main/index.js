const express = require("express");
const app = express();
const cors = require("cors");
const cookieParser = require("cookie-parser");
require("dotenv").config();
require("./db");

const PORT = process.env.PORT || 8000;

// âœ… Fix CORS: Allow frontend & enable cookies
app.use(
    cors({
        origin: "http://localhost:3000", // âœ… Allow frontend to access API
        credentials: true, // âœ… Allow cookies & authentication headers
    })
);

// âœ… Middleware Order is Important
app.use(express.json()); // âœ… Parse JSON requests
app.use(express.urlencoded({ extended: true })); // âœ… Handle form data
app.use(cookieParser()); // âœ… Parse cookies before routes

// âœ… Import Routes
const authRoutes = require("./Routes/Auth");
const calorieIntakeRoutes = require("./Routes/CalorieIntake");
const adminRoutes = require("./Routes/Admin");
const imageUploadRoutes = require("./Routes/imageUploadRoutes");
const sleepTrackRoutes = require("./Routes/SleepTrack");
const stepTrackRoutes = require("./Routes/StepTrack");
const weightTrackRoutes = require("./Routes/WeightTrack");
const waterTrackRoutes = require("./Routes/WaterTrack");
const workoutTrackRoutes = require("./Routes/WorkoutTrack");
const workoutRoutes = require("./Routes/WorkoutPlans");
const reportRoutes = require("./Routes/Report");

// âœ… Use Routes
app.use("/auth", authRoutes);
app.use("/calorieintake", calorieIntakeRoutes);
app.use("/admin", adminRoutes);
app.use("/image-upload", imageUploadRoutes);
app.use("/sleeptrack", sleepTrackRoutes);
app.use("/steptrack", stepTrackRoutes);
app.use("/weighttrack", weightTrackRoutes);
app.use("/watertrack", waterTrackRoutes);
app.use("/workouttrack", workoutTrackRoutes);
app.use("/workoutplans", workoutRoutes);
app.use("/report", reportRoutes);

// âœ… Test Route
app.get("/", (req, res) => {
    res.json({ message: "The API is working ðŸš€" });
});

// âœ… Global Error Handling Middleware
app.use((err, req, res, next) => {
    console.error("ðŸ”¥ Unhandled Error:", err);
    res.status(err.status || 500).json({
        ok: false,
        message: err.message || "Internal Server Error",
    });
});

// âœ… Start Server
app.listen(PORT, () => {
    console.log(`âœ… Server running on http://localhost:${PORT}`);
});
